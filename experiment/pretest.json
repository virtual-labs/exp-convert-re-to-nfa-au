{
  "version": 2.0,
  "questions": [
    {
      "question": "In automata theory, what does a Regular Expression (RE) represent?",
      "answers": {
        "a": "A symbolic notation used to describe patterns in strings.",
        "b": "A table of states and transitions in an automaton.",
        "c": "A set of rules for programming language syntax.",
        "d": "A mathematical formula for calculating probabilities."
      },
      "explanations": {
        "a": "Correct! Regular expressions are symbolic notations used to define sets of strings over an alphabet.",
        "b": "This describes a transition table, not a regular expression.",
        "c": "Syntax rules are part of grammars, not directly the same as regular expressions.",
        "d": "Regular expressions are unrelated to probability calculations."
      },
      "correctAnswer": "a",
      "difficulty": "basic"
    },
    {
      "question": "What does NFA stand for and how does it differ from DFA?",
      "answers": {
        "a": "Non-Finite Automaton; it has infinite states unlike DFA.",
        "b": "Nondeterministic Finite Automaton; it can have multiple possible transitions for the same input symbol.",
        "c": "Networked Finite Automaton; it processes inputs over a network.",
        "d": "Numerical Finite Algorithm; it processes numbers deterministically."
      },
      "explanations": {
        "a": "Incorrect. Both NFAs and DFAs have a finite number of states.",
        "b": "Correct! An NFA can have multiple possible next states (or ε-moves) for the same input symbol, unlike DFA.",
        "c": "No such concept exists in automata theory.",
        "d": "Not a term used in automata theory."
      },
      "correctAnswer": "b",
      "difficulty": "basic"
    },
    {
      "question": "In Thompson’s Construction, what is the purpose of using ε (epsilon) transitions?",
      "answers": {
        "a": "To allow state changes without consuming any input symbol.",
        "b": "To skip invalid input symbols.",
        "c": "To store intermediate computation results.",
        "d": "To represent a wildcard in regular expressions."
      },
      "explanations": {
        "a": "Correct! ε-transitions connect fragments in Thompson’s Construction without consuming input.",
        "b": "Epsilon transitions are not used to skip invalid inputs.",
        "c": "NFAs do not store computation results in this way.",
        "d": "A wildcard is different from an epsilon transition."
      },
      "correctAnswer": "a",
      "difficulty": "intermediate"
    },
    {
      "question": "When converting the regular expression (a|b)*abb to an NFA using Thompson’s Construction, which operation is applied first?",
      "answers": {
        "a": "Union (alternation) of 'a' and 'b'.",
        "b": "Concatenation of the sequence 'a', 'b', 'b'.",
        "c": "Applying the Kleene star (*) to the alternation result.",
        "d": "Direct conversion of the entire expression without decomposition."
      },
      "explanations": {
        "a": "The alternation of 'a' and 'b' is done first for the (a|b) part.",
        "b": "Concatenation happens later after applying Kleene star.",
        "c": "Correct! After creating the alternation NFA for (a|b), the Kleene star is applied to that fragment.",
        "d": "Thompson’s method always decomposes the expression into smaller fragments."
      },
      "correctAnswer": "c",
      "difficulty": "intermediate"
    },
    {
      "question": "Why is Thompson’s Construction preferred for implementing regex in lexical analyzers?",
      "answers": {
        "a": "It guarantees minimal DFA states.",
        "b": "It produces an NFA that is simple to construct mechanically.",
        "c": "It avoids the need for any state transitions.",
        "d": "It works only for very short regular expressions."
      },
      "explanations": {
        "a": "Incorrect. Thompson’s method does not guarantee minimal DFA states.",
        "b": "Correct! Its step-by-step fragment construction makes it easy to implement automatically.",
        "c": "NFAs still require transitions; ε-transitions are common in this method.",
        "d": "It works for any valid regular expression, regardless of length."
      },
      "correctAnswer": "b",
      "difficulty": "intermediate"
    }
  ]
}
